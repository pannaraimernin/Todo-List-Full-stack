{"ast":null,"code":"import axios from 'axios';\nimport LocalStorageService from \"../services/localStorageService\";\naxios.defaults.baseURL = \"http://localhost:8000\";\naxios.interceptors.request.use(config => {\n  if (config.url.includes(\"/login\") || config.url.includes(\"/register\")) return config;\n  const token = LocalStorageService.getToken();\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  return config;\n}, err => {\n  Promise.reject(err);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, err => {\n  var _err$response;\n\n  if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n    lo;\n  }\n});\nexport default axios;","map":{"version":3,"sources":["/Users/panna/Repos/Frontend-Authentication/exercise-frontend-authentication/src/config/axios.js"],"names":["axios","LocalStorageService","defaults","baseURL","interceptors","request","use","config","url","includes","token","getToken","headers","err","Promise","reject","response","status","lo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AACAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAE;AACJ,MAAGA,MAAM,CAACC,GAAP,CAAWC,QAAX,CAAoB,QAApB,KAAiCF,MAAM,CAACC,GAAP,CAAWC,QAAX,CAAoB,WAApB,CAApC,EAAqE,OAAOF,MAAP;AAErE,QAAMG,KAAK,GAAGT,mBAAmB,CAACU,QAApB,EAAd;;AACA,MAAGD,KAAH,EAAS;AACLH,IAAAA,MAAM,CAACK,OAAP,CAAe,eAAf,IAAmC,UAASF,KAAM,EAAlD;AACH;;AACD,SAAOH,MAAP;AAEH,CAVL,EAWIM,GAAG,IAAG;AACFC,EAAAA,OAAO,CAACC,MAAR,CAAeF,GAAf;AACH,CAbL;AAgBAb,KAAK,CAACI,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CACIU,QAAQ,IAAG;AACP,SAAOA,QAAP;AACH,CAHL,EAIIH,GAAG,IAAG;AAAA;;AACF,MAAG,kBAAAA,GAAG,CAACG,QAAJ,gEAAcC,MAAd,MAAyB,GAA5B,EAAgC;AAC5BC,IAAAA,EAAE;AACL;AACJ,CARL;AAWA,eAAelB,KAAf","sourcesContent":["import axios from 'axios';\nimport LocalStorageService from \"../services/localStorageService\";\n\naxios.defaults.baseURL = \"http://localhost:8000\";\naxios.interceptors.request.use(\n    config=>{\n        if(config.url.includes(\"/login\") || config.url.includes(\"/register\"))return config;\n        \n        const token = LocalStorageService.getToken();\n        if(token){\n            config.headers[\"Authorization\"] = `Bearer ${token}`;\n        }\n        return config;\n\n    },\n    err =>{\n        Promise.reject(err)\n    }\n);\n\naxios.interceptors.response.use(\n    response =>{\n        return response\n    },\n    err =>{\n        if(err.response?.status === 401){\n            lo\n        }\n    }\n)\n\nexport default axios;"]},"metadata":{},"sourceType":"module"}